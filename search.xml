<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Leetcode解题-打卡记录-3-23</title>
      <link href="/tramblog/archives/3a34de1f.html"/>
      <url>/tramblog/archives/3a34de1f.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天的题目是 链表的中间结点 </p></blockquote><h4 id="链表的中间结点"><a href="#链表的中间结点" class="headerlink" title="链表的中间结点"></a>链表的中间结点</h4><p><strong>题目：</strong> 给定一个带有头结点 head 的非空单链表，返回链表的中间结点。如果有两个中间结点，则返回第二个中间结点。</p><p><strong>难度：</strong> 简单</p><p><strong>示例：</strong> </p><p>示例1.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：[1,2,3,4,5]</span><br><span class="line">输出：此列表中的结点 3 (序列化形式：[3,4,5])</span><br><span class="line">返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。</span><br><span class="line">注意，我们返回了一个 ListNode 类型的对象 ans，这样：</span><br><span class="line">ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL.</span><br></pre></td></tr></tbody></table></figure><p>示例2.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[1,2,3,4,5,6]</span><br><span class="line">输出：此列表中的结点 4 (序列化形式：[4,5,6])</span><br><span class="line">由于该列表有两个中间结点，值分别为 3 和 4，我们返回第二个结点。</span><br></pre></td></tr></tbody></table></figure><p><strong>解题思路：</strong></p><ol><li><p>一开始，我的想法是将链表转换成数组形势，通过遍历获取中间节点的数组下标；</p></li><li><p>第二种方法，是通过快慢指针的方法来获取中间节点，一开始，让快指针的速度是慢指针的两倍，也就是慢指针走一步，快指针则走两步，这样的话，当快指针接近链表终点的时候，正好是慢指针走整段路程的一半；</p></li></ol><p><strong>解题：</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.数组方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) {</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{ListNode}</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{ListNode}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> middleNode = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> tmpHead = head;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">while</span>(tmpHead){</span><br><span class="line">        res[len++] = tmpHead;</span><br><span class="line">        tmpHead = tmpHead.next;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res[len &gt;&gt; <span class="number">1</span>];</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">&gt;&gt; 右移运算符，在许多计算机编程语言（例如：C语言、C++语言、Java语言、JavaScript语言、Pascal语言等）中，“&gt;&gt;”代表右移运算符，就相当于“shr”。该运算符为双目运算符，结合方向为从左到右，作用是把一个整型数的所有位向右移动指定的位数，移动到右边界之外的多余二进制位会被丢弃，并从左边界移入一个二进制位，若原数的最高位为1，则移入的二进制位为1，否则为0。</span></span><br><span class="line"><span class="comment">右移运算的两个操作数应为整数类型。第一个操作数是要进行移位操作的数，第二个操作数指定第一个操作数移动的位数。如果第二个操作数等于0则不发生任何移位。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.快慢指针方法：</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) {</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{ListNode}</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{ListNode}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> middleNode = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> fast = head,slow = head;</span><br><span class="line">    <span class="keyword">while</span>(fast&amp;&amp;fast.next){</span><br><span class="line">        fast=fast.next.next;</span><br><span class="line">        slow=slow.next</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> slow</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode解题 打卡记录 3/22</title>
      <link href="/tramblog/archives/458c31bd.html"/>
      <url>/tramblog/archives/458c31bd.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天的题目真的让我发现了 数学的重要性，数学的算法和计算机的算法，数学的算法，在我理解和复习了以前的知识点，还是可以理解。但计算机的算法，我一个小白是真的没有入门啊，我还得多多学习。</p></blockquote><h4 id="水壶问题"><a href="#水壶问题" class="headerlink" title="水壶问题"></a>水壶问题</h4><p><strong>题目：</strong> </p><p>有两个容量分别为 x升 和 y升 的水壶以及无限多的水。请判断能否通过使用这两个水壶，从而可以得到恰好 z升 的水？</p><p>如果可以，最后请用以上水壶中的一或两个来盛放取得的 z升 水。</p><p>你允许：</p><ul><li>装满任意一个水壶</li><li>清空任意一个水壶</li><li>从一个水壶向另外一个水壶倒水，直到装满或者倒空</li></ul><p><strong>示例：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.</span><br><span class="line">输入: x = 3, y = 5, z = 4</span><br><span class="line">输出: True</span><br><span class="line">2.</span><br><span class="line">输入: x = 2, y = 6, z = 5</span><br><span class="line">输出: False</span><br></pre></td></tr></tbody></table></figure><p><strong>解题思路：</strong></p><p>​    解题方法我看了别人的思路，有两种：</p><pre><code>1. 数学方法： 贝祖定理  2. 计算机算法： BFS 深度优先算法</code></pre><p> <strong>解题：</strong></p><p>1.贝祖定理</p><p>贝祖定理，说明了对任何整数a、b和它们的最大公约数d，关于未知数x和y的线性不定方程（称为裴蜀等式）：若a,b是整数,且gcd(a,b)=d，那么对于任意的整数x,y,ax+by都一定是d的倍数，特别地，一定存在整数x,y，使ax+by=d成立</p><p>所以可以利用这个等式来解题：</p><p><code>let gcd=(a,b)=&gt;(b===0?a:gcd(b,a%b))</code></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{number}</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{number}</span> <span class="variable">y</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{number}</span> <span class="variable">z</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{boolean}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> gcd=<span class="function">(<span class="params">a,b</span>)=&gt;</span>(b===<span class="number">0</span>?a:gcd(b,a%b))</span><br><span class="line"><span class="keyword">var</span> canMeasureWater = <span class="function"><span class="keyword">function</span>(<span class="params">x, y, z</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span>(x+y&lt;z){ <span class="keyword">return</span> <span class="literal">false</span>}</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>|y==<span class="number">0</span>)<span class="keyword">return</span> z==<span class="number">0</span> || x+y==z</span><br><span class="line">    <span class="keyword">return</span> z%(gcd(x,y))==<span class="number">0</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>2.bfs 广度优先算法</p><p>暂时还没理解，日后补充自己的理解</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 解题 打卡记录 3/20</title>
      <link href="/tramblog/archives/c623483e.html"/>
      <url>/tramblog/archives/c623483e.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录今天的解题</p></blockquote><h4 id="最小的K个数"><a href="#最小的K个数" class="headerlink" title="最小的K个数"></a>最小的K个数</h4><p><b>题目：</b> 输入整数数组 <code>arr</code>  ，找出其中最小的 k 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4</p><p><b>难度：</b> 简单</p><p><b>解题思路：</b></p><p>一开始 我的想法就是要对参数进行验证 是否是数组类型，还有给出的k个数 是否大于数组本身的长度。但后来又看到 注释里已经写明了输入的参数类型，想到这边主要的是解题思路，所以没有对数据类型验证进行深入验证；</p><ol><li>将数组进行升序排序，这里想到最快的方法就是数组本身的<code>sort()</code>方法</li><li>根据给定的K值 返回K个 数值</li></ol><p><b>解题：</b></p> <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{number[]}</span> <span class="variable">arr</span></span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@param <span class="type">{number}</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@return <span class="type">{number[]}</span></span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">var</span> getLeastNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">arr, k</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span>(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>&amp;&amp;k&lt;= arr.length){</span><br><span class="line">        arr.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>{<span class="keyword">return</span> a - b});</span><br><span class="line">        <span class="keyword">let</span> res=[];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;k;i++){</span><br><span class="line">            res.push(arr[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res </span><br><span class="line">    }<span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    }</span><br><span class="line">  };</span><br></pre></td></tr></tbody></table></figure><h4 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h4><p><b>题目:</b>   给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><p><strong>示例：</strong> </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></tbody></table></figure><p><b>难度：</b> 简单</p><p><strong>解题思路：</strong> </p><p>这题的关键点就是获取目标值跟数组中某一值的差值，利用差值来寻找另一个值。</p><ol><li>利用了ES6中 的<code>Map()</code>函数</li></ol><p><strong>解题：</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{number[]}</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{number}</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{number[]}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> arr= <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>;i&lt;nums.length;i++){</span><br><span class="line">        <span class="keyword">let</span> key = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span>(arr.has(key)){</span><br><span class="line">            <span class="keyword">return</span> [arr.get(key),i]</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            arr.set(nums[i],i)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h4 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a>两数相加</h4><p><strong>题目：</strong> 给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>*<em>示例： *</em> </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">输出：7 -&gt; 0 -&gt; 8</span><br><span class="line">原因：342 + 465 = 807</span><br></pre></td></tr></tbody></table></figure><p><strong>难度：</strong> 中等</p><p><strong>解题思路：</strong></p><p>这个题关键是要先了解链表这个概念。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Js中 可以把 链表看作</span></span><br><span class="line">{</span><br><span class="line">element: <span class="number">2</span>,</span><br><span class="line">next: {</span><br><span class="line">element: <span class="number">3</span>,</span><br><span class="line">next: {</span><br><span class="line">element: <span class="number">4</span>,</span><br><span class="line">next: <span class="literal">null</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>解题：</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) {</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{ListNode}</span> <span class="variable">l1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{ListNode}</span> <span class="variable">l2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{ListNode}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>{</span><br><span class="line">   <span class="keyword">let</span> head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">   <span class="keyword">let</span> p = l1,q=l2,cur = head;</span><br><span class="line">   <span class="keyword">let</span> carry = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span>(p || q){</span><br><span class="line">       <span class="keyword">let</span> x = p ? p.val : <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">let</span> y = q ? q.val : <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">let</span> sum = x + y + carry;</span><br><span class="line">       carry = sum&lt;<span class="number">10</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">       cur.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">       cur = cur.next;</span><br><span class="line">       <span class="keyword">if</span>(p){</span><br><span class="line">           p = p.next</span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">if</span>(q) {</span><br><span class="line">           q = q.next</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line">   <span class="keyword">if</span>(carry&gt;<span class="number">0</span>) {</span><br><span class="line">       cur.next = <span class="keyword">new</span> ListNode(carry)</span><br><span class="line">   }</span><br><span class="line">   <span class="keyword">return</span> head.next</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html标签在不同浏览器下的适配（持续更新...)</title>
      <link href="/tramblog/archives/6395a1e2.html"/>
      <url>/tramblog/archives/6395a1e2.html</url>
      
        <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote><p>因为不同浏览器都有一套自己的样式选择，所以有时候，我们在写标签的时候需要对标签进行 默认样式 处理；</p></blockquote><h5 id="button"><a href="#button" class="headerlink" title="button"></a>button</h5><h6 id="取消-button-所有的默认样式"><a href="#取消-button-所有的默认样式" class="headerlink" title="取消 button 所有的默认样式"></a>取消 button 所有的默认样式</h6><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span> {</span><br><span class="line">  <span class="attribute">appearance</span>: none;</span><br><span class="line">  <span class="attribute">-moz-appearance</span>: none; <span class="comment">/* Firefox */</span></span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: none; <span class="comment">/* Safari 和 Chrome */</span> </span><br><span class="line">} <span class="comment">/*取消掉默认的button样式，自己写的才能显示出来*/</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>针对性取消部分的button 默认样式</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span> {</span><br><span class="line">  <span class="attribute">-webkit-tap-highlight-color</span>: transparent; <span class="comment">/*取消按钮效果功能*/</span></span><br><span class="line">  <span class="attribute">-webkit-user-select</span>:auto; <span class="comment">/*取消用户选中功能*/</span></span><br><span class="line">  <span class="attribute">webkit-touch-callout</span>:none; <span class="comment">/*取消按钮文字放大效果功能*/</span></span><br><span class="line">  <span class="attribute">-webkit-user-select</span>:none;</span><br><span class="line">  <span class="attribute">-khtml-user-select</span>:none;</span><br><span class="line">  <span class="attribute">-moz-user-select</span>:none;</span><br><span class="line">  <span class="attribute">-ms-user-select</span>:none;</span><br><span class="line">  <span class="attribute">user-select</span>:none;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>阻止一些默认操作</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'touchstart'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{  <span class="comment">//阻止双击放大</span></span><br><span class="line">   <span class="keyword">if</span>(event.touches.length&gt;<span class="number">1</span>){</span><br><span class="line">      event.preventDefault();</span><br><span class="line">   }</span><br><span class="line">})</span><br><span class="line"><span class="keyword">var</span> lastTouchEnd=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'touchend'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{ <span class="comment">//阻止双击放大</span></span><br><span class="line">   <span class="keyword">var</span> now=(<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</span><br><span class="line">   <span class="keyword">if</span>(now-lastTouchEnd&lt;=<span class="number">300</span>){</span><br><span class="line">       event.preventDefault();</span><br><span class="line">    }</span><br><span class="line">    lastTouchEnd=now;</span><br><span class="line">})</span><br><span class="line">$(<span class="string">'body'</span>).on(<span class="string">'touchend'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>{  <span class="comment">//阻止双击放大</span></span><br><span class="line">     e.preventDefault();</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 实现图片上传预览以及oss直传</title>
      <link href="/tramblog/archives/ed4267f7.html"/>
      <url>/tramblog/archives/ed4267f7.html</url>
      
        <content type="html"><![CDATA[<h4 id="Vue图片的上传实现"><a href="#Vue图片的上传实现" class="headerlink" title="Vue图片的上传实现"></a>Vue图片的上传实现</h4><h5 id="html部分"><a href="#html部分" class="headerlink" title="html部分"></a>html部分</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class="main"&gt;</span><br><span class="line">      &lt;input id="upload_pic" ref="uploadpic" type="file" accept='image/*' style="display: none;" name="file" @change="fileChange()" /&gt;</span><br><span class="line">      &lt;div class="img_preview" v-if="ImgList.length&gt;0"&gt;</span><br><span class="line">        &lt;div class="img" v-for="(item,index) in ImgList" :key="index" :style="{background:'url('+item+')no-repeat center/cover'}"&gt;</span><br><span class="line">          &lt;div class="delBtn" @click="deletepic(index)"&gt;删除&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class="uploadBtn" @click.stop="picBtn()" v-if="ImgList.length &lt; 3"&gt;</span><br><span class="line">        &lt;i class="upload-icons"&gt;&lt;/i&gt;</span><br><span class="line">        &lt;p class="word"&gt;上传照片&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h5 id="script部分"><a href="#script部分" class="headerlink" title="script部分"></a>script部分</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">    data(){return{</span><br><span class="line">      ImgList:[]，</span><br><span class="line">      piconline:[],</span><br><span class="line">      dataObj:{}</span><br><span class="line">      dirList:''  </span><br><span class="line">    }},</span><br><span class="line">    beforeRouteEnter(to,from,next){ //进入路由之前进行的操作</span><br><span class="line">      next(vm=&gt;{</span><br><span class="line">        vm.getOssSetting();</span><br><span class="line">      })</span><br><span class="line">    },</span><br><span class="line">    methods:{</span><br><span class="line">      picBtn(){</span><br><span class="line">        this.$refs.uploadpic.click() //激发input点击事件，</span><br><span class="line">      },</span><br><span class="line">      fileChange(){</span><br><span class="line">        let files=this.$refs.uploadpic.files;</span><br><span class="line">        var reader = new FileReader();</span><br><span class="line">        var content;</span><br><span class="line">        var current=this;</span><br><span class="line">        reader.onload = function(event) {</span><br><span class="line">          content = event.target.result;</span><br><span class="line">          current.ImgList.push(content);// 形成预览的图片数组</span><br><span class="line">        }</span><br><span class="line">        reader.onerror = function(event) {</span><br><span class="line">          alert('error')</span><br><span class="line">        }</span><br><span class="line">        content = reader.readAsDataURL(files[0],"UTF-8");</span><br><span class="line">        this.upPic(files[0])</span><br><span class="line">      },</span><br><span class="line">      // 时间前缀字符串 用于自定义上传的图片名的时间前缀</span><br><span class="line">      preDate_string() {</span><br><span class="line">        const NowDay = new Date()</span><br><span class="line">        const YY = NowDay.getFullYear().toString()</span><br><span class="line">        let MM = NowDay.getMonth() + 1</span><br><span class="line">        MM = MM &gt; 10 ? MM : '0' + MM</span><br><span class="line">        let DD = NowDay.getDate()</span><br><span class="line">        DD = DD &gt; 10 ? DD : '0' + DD</span><br><span class="line">        this.currentDate[0] = YY</span><br><span class="line">        this.currentDate[1] = MM</span><br><span class="line">        this.currentDate[2] = DD</span><br><span class="line">        return YY + MM + DD</span><br><span class="line">      },</span><br><span class="line">      upPic(file){ //上传oss</span><br><span class="line">            const self = this</span><br><span class="line">            console.log(file)</span><br><span class="line">            const point = file.name.lastIndexOf('.')</span><br><span class="line">            const suffix = file.name.substr(point)；//获取图片的文件后缀</span><br><span class="line">            const fileName = file.name.substr(0, point)</span><br><span class="line">            const date = Date.parse(new Date())</span><br><span class="line">            const fileNames = random_string()+`${suffix}`； //自定义上传图片的名字</span><br><span class="line">            const fileurl =self.dirList+ '/' + fileNames</span><br><span class="line">            // client.multipartUpload('文件路径/文件名称','上传文件')</span><br><span class="line">            client(this.dataObj).multipartUpload(fileurl, file).then(res=&gt;{</span><br><span class="line">                Toast('上传成功！')</span><br><span class="line">                if(res){</span><br><span class="line">                    this.piconline.push({name:file.name,url:res.name}) //这是需要最后提交到服务器的数据</span><br><span class="line">                    this.$refs.uploadpic.value=null; //上传成功后清除 #upload_pic 中的值 使得连着上传同样的值也能够 引起 change事件</span><br><span class="line">                }</span><br><span class="line">            }).catch(err =&gt; {</span><br><span class="line">               console.log(err)</span><br><span class="line">            })</span><br><span class="line">        },</span><br><span class="line">      deletepic(index){ //删除预览</span><br><span class="line">        this.ImgList.splice(index,1);</span><br><span class="line">        this.piconline.splice(index,1);</span><br><span class="line">      },</span><br><span class="line">      getOssSetting(){ //获取oss设置</span><br><span class="line">        this.$api.OssApi.getSetting().then(res=&gt;{ </span><br><span class="line">          if(res.status==200&amp;&amp;res.data.code==200){</span><br><span class="line">            return res.data.data;</span><br><span class="line">          }</span><br><span class="line">        }).then(json=&gt;{</span><br><span class="line">          if(json){</span><br><span class="line">            this.dataObj=json;</span><br><span class="line">            this.dirList =this.dataObj.apppic+ this.currentDate.join('/'); //图片的文件路径</span><br><span class="line">          }</span><br><span class="line">        }).catch(err=&gt;{</span><br><span class="line">          console.log(err)</span><br><span class="line">        })</span><br><span class="line">      },</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Oss直传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 在使用lib-flexible和px2rem-loader时 引用第三方UI组件出现的问题</title>
      <link href="/tramblog/archives/aa6d5cc4.html"/>
      <url>/tramblog/archives/aa6d5cc4.html</url>
      
        <content type="html"><![CDATA[<p>在写移动端项目的时候，时常会用到lib-flexible和px2rem-loader来进行适配。</p><h4 id="lib-flexible的使用"><a href="#lib-flexible的使用" class="headerlink" title="lib-flexible的使用"></a>lib-flexible的使用</h4><p>1). lib-flexible的安装</p><p> <code>npm install lib-flexible --save</code></p><p>2). 在项目的入口js(main.js)文件中引入lib-flexible</p><p><code>import 'lib-flexible'</code></p><p>注意： </p><a id="more"></a><p>lib-flexible会自动在html的head中添加一个meta name=”viewport”的标签，同时会自动设置html的font-size为屏幕宽度除以10，也就是1rem等于html根节点的font-size。<br>这时候需要把项目的index.html文件的头部 meta name=”viewport”的标签进行注释。注意flexible生成的meta标签的 data-dpr=”2”</p><h4 id="px2rem-loader的使用"><a href="#px2rem-loader的使用" class="headerlink" title="px2rem-loader的使用"></a>px2rem-loader的使用</h4><p>1). px2rem-loader的安装</p><p><code>npm install px2rem-loader --save-dev</code></p><p>2). px2rem-loader的配置</p><p>这需要在build文件下的utils.js中进行配置</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> px2remLoader = {</span><br><span class="line">    loader:<span class="string">'px2rem-loader'</span>,</span><br><span class="line">    options: {</span><br><span class="line">      remUnit: <span class="number">75</span> <span class="comment">//这里一般根据UI稿给的尺寸走 我一般是iphone6 750px的尺寸</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>接着在  generateLoaders（）中添加px2remLoader </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateLoaders</span> (<span class="params">loader, loaderOptions</span>) </span>{ </span><br><span class="line">  <span class="keyword">const</span> loaders = options.usePostCSS ? [cssLoader, postcssLoader] : [cssLoader,px2remLoader] <span class="comment">//加上px2remLoader</span></span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong><em>这里主要是将px单位转成rem</em></strong></p><p>到这一步为止，手机的适配基本完成。</p><hr><p>但当我在引用第三方UI组件的时候，却出现样式缩小的情况。我后来看了一下，是因为第三方的UI组件样式也被转成了rem。这一步其实是不需要的，因为第三方的UI样式本身就经过了适配。<br>我在网上查了很久，试了很多方法，都无法解决。例如最多的解决办法是将<code>px2rem-loader</code>换成<code>postcss-px2rem-exclude</code>，但在我这个项目中却没有出现效果。<br>最后看到别人的一条评论才突然明白，正是因为第三方的UI组件已经经过适配，它们的dpr是1，而我的项目中自动生成的<code>data-dpr=2</code>,所以导致第三方样式缩小。</p><p>所以 还是需要保留 项目的index.html文件的<code>meta name='viewport'</code>标签。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 图片 2、3倍图的适配方法</title>
      <link href="/tramblog/archives/64aa4ef7.html"/>
      <url>/tramblog/archives/64aa4ef7.html</url>
      
        <content type="html"><![CDATA[<h4 id="scss、less中的mixin-方法-推荐"><a href="#scss、less中的mixin-方法-推荐" class="headerlink" title="scss、less中的mixin 方法(推荐)"></a>scss、less中的mixin 方法(推荐)</h4><ol><li>SCSS</li></ol><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> background_image(<span class="variable">$url</span>) {</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="variable">$url</span> + <span class="string">"@2x.png"</span>);</span><br><span class="line">    <span class="keyword">@media</span> (-webkit-min-device-pixel-ratio: <span class="number">3</span>),(min-device-pixel-ratio: <span class="number">3</span>) {</span><br><span class="line">        <span class="attribute">background-image</span>: url(<span class="variable">$url</span> + <span class="string">"@3x.png"</span>);</span><br><span class="line">    }</span><br><span class="line">} <span class="comment">//可以根据自己具体的需求进行改变</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li><p>LESS</p><a id="more"></a></li></ol><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bg-image</span>(<span class="variable">@url</span>, <span class="variable">@ext</span>) {</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="string">~"url('@{url}@2x.@{ext}')"</span>;</span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">3</span>),(<span class="attribute">min-device-pixel-ratio</span>: <span class="number">3</span>) {</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="string">~"url('@{url}@3x.@{ext}')"</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.container</span> {</span><br><span class="line">  <span class="selector-class">.bg-image</span>(<span class="string">"xxxximage"</span>, <span class="string">"png"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="可通过img标签属性动态切换url"><a href="#可通过img标签属性动态切换url" class="headerlink" title="可通过img标签属性动态切换url"></a>可通过img标签属性动态切换url</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">'100'</span> <span class="attr">height</span>=<span class="string">'100'</span> <span class="attr">src</span>=<span class="string">'image100.png'</span> <span class="attr">srcset:</span>'<span class="attr">image200.png</span> <span class="attr">2x</span>,<span class="attr">image300.png</span> <span class="attr">3x</span>' /&gt;</span></span><br><span class="line">//标签上进行适配 个人相对于第一种方法来说 比较麻烦 html能少写点就少写点</span><br></pre></td></tr></tbody></table></figure><h4 id="CSS的DevicePixelRatio媒体查询属性"><a href="#CSS的DevicePixelRatio媒体查询属性" class="headerlink" title="CSS的DevicePixelRatio媒体查询属性"></a>CSS的DevicePixelRatio媒体查询属性</h4><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.photo</span> {</span><br><span class="line"><span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">'image100.png'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-radio:</span><span class="number">2</span>),screen <span class="keyword">and</span> (<span class="attribute">min--moz-device-pixel-ratio:</span><span class="number">2</span>){</span><br><span class="line"><span class="selector-class">.photo</span> {</span><br><span class="line"><span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">'image200.png'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-radio:</span><span class="number">3</span>),screen <span class="keyword">and</span> (<span class="attribute">min--moz-device-pixel-ratio:</span><span class="number">3</span>){</span><br><span class="line"><span class="selector-class">.photo</span> {</span><br><span class="line"><span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">'image300.png'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 多行省略文本打包后出现失效的情况</title>
      <link href="/tramblog/archives/2a1ab756.html"/>
      <url>/tramblog/archives/2a1ab756.html</url>
      
        <content type="html"><![CDATA[<h5 id="问题所在"><a href="#问题所在" class="headerlink" title="问题所在"></a>问题所在</h5><ul><li>一般情况下 页面文本布局需要设置多行省略的样式</li></ul><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text</span> {</span><br><span class="line">display: -webkit-box; //将对象作为弹性伸缩盒子模型显示 与 -webkit-box-orient 搭配使用</span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line">text-overflow: ellipsis; //这个样式属性的意思是文本溢出后以省略号的样式呈现</span><br><span class="line">-webkit-box-orient: vertical; //设置或检索伸缩盒对象的子元素的排列方式 ，与 -webkit-box-orient 搭配使用</span><br><span class="line">-webkit-line-clamp: 2; //用来限制在一个块元素显示的文本的行数。即省略号出现的行数</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>但经过Vue <code>npm run build</code>之后，会使<code>-webkit-box-orient: vertical;</code>丢失。<br>原因是 <code>autoprefixer</code>会自动移除老式过时的代码 </p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><ul><li>所以我们在vue里写的时候要注意： 添加注释关闭<code>autoprefixer</code>，重点是那两行注释，不可去掉</li></ul><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text</span> {</span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">-webkit-line-clamp</span>: <span class="number">2</span>;</span><br><span class="line">     <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="comment">/*! autoprefixer: off */</span></span><br><span class="line">    <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">    <span class="comment">/*autoprefixer: on */</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次尝试</title>
      <link href="/tramblog/archives/a784e92a.html"/>
      <url>/tramblog/archives/a784e92a.html</url>
      
        <content type="html"><![CDATA[<p>###第一次尝试发布</p><p><strong>这是加粗的文字</strong></p><p><em>这是倾斜的文字</em></p><p><strong><em>这里是斜体加粗的文字</em></strong></p><a id="more"></a><p>～～这里是删除线的文字～～</p><blockquote><p>这里是引用的文字</p></blockquote><hr><p>这里是链接</p><p><a href="http://jianshu.com" target="_blank" rel="noopener">简书</a></p><p>这里是列表</p><ul><li>1<ul><li>2</li></ul></li></ul><ul><li>3<ul><li>4</li><li></li></ul></li></ul><ol><li><p>2</p></li><li><p>5</p></li></ol><table><thead><tr><th>姓名</th><th align="center">表头</th></tr></thead><tbody><tr><td>内容</td><td align="center">内容</td></tr></tbody></table><p><code>javascript</code></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>{</span><br><span class="line">  alert(<span class="number">1</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
